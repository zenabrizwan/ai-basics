# -*- coding: utf-8 -*-
"""CL461_AI_6A_Lab_7_Problem_Solving_by_Genetic_Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lIvQXDnWHfYaxRTq0PzmH8cM_zijob2T

Genetic Algorithm
"""

import random

"""Let say we have fucntion that evaluates the expression to 0 if the answer of expression " 6 * x ** 3 + 9 * y ** 2 + 90 * z " is 25.
So That's mean we need the most suitable values of x, y and z so that we could achive our target value whichis 25 in this case.
"""

def evaluateExpression(x, y, z):
	return 6 * x ** 3 + 9 * y ** 2 + 90 * z - 25

"""Let's write the solution based on Genetic Algorithm technique to find the most suitable values of x, y and z.

*Step1* : Population of Solutions:
Population is generated entirely from random numbers let say upto 1000 indivuduals.
"""

# generate solutions
solution = [
     [0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
     [1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
     [0, 1, 0, 0, 0, 0, 1, 1, 0, 1],
     [0, 0, 1, 0, 1, 1, 0, 0, 0, 0],
     [0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
     [0, 1, 0, 1, 1, 0, 1, 0, 0, 0],
     [1, 1, 1, 0, 0, 0, 1, 0, 1, 0],
     [0, 0, 0, 0, 1, 1, 1, 0, 0, 0]
 ]

"""Step2: Fitness fucntion:
So the most fittest solution will be the one which evalutes the expression to "0". Otherwise the best solution will be closest to zero.
So the fittness in this case can be seen if the solution is closest to zero. Hnece we can return highest fitness value to those solution which are closest to zero.
"""

def fitness(x, y, z):
  ans = evaluateExpression(x, y, z)
  # Assuming kw is a predefined knapsack weight limit
  if ans <= kw:
    return evaluateExpression(x, y, z)
  else:
    return 0

"""Step3: Mating, Crossover or Generating the Genrations:
During each generations further sub steps are performed like :
Step 3.1: Selection of top ranked solutions
Step 3.2: Mutation or slight changes or variation in values of solution.
P.S(Here for the sake of anology if solution can be considered as chromosome then vatiable values can be considered as genes)

"""

for generation_count in range(10000):
	rankedSolutions = []
  # fitness step
	for solution in solutions:
		rankedSolutions.append((fitness(solution[0], solution[1], solution[2]), solution))
	rankedSolutions.sort()
	rankedSolutions.reverse()
	print(f"=== Generation {generation_count} best solutions ====")
	print(rankedSolutions[0])

	if rankedSolutions[0][0] > 999:
		break

	bestSolution = rankedSolutions[:100]
	# print(bestSolution)

  # selection step
	variables = []
	for solution in bestSolution:
		variables.append(solution[1][0])  # variable x
		variables.append(solution[1][1])  # variable y
		variables.append(solution[1][2])  # variable z

	newGeneration = []
  # mutation step
	for counter in range(1000):
		x = random.choice(variables) * random.uniform(0.99, 1.01)
		y = random.choice(variables) * random.uniform(0.99, 1.01)
		z = random.choice(variables) * random.uniform(0.99, 1.01)

		newGeneration.append((x, y, z))

	solutions = newGeneration

def two_point_crossover(parent1, parent2):

  crossover_point1 = random.randint(1, len(parent1) - 2)
  crossover_point2 = random.randint(crossover_point1, len(parent1) - 1)
  child1 = parent1[:crossover_point1] + parent2[crossover_point1:crossover_point2] + parent1[crossover_point2:]
  child2 = parent2[:crossover_point1] + parent1[crossover_point1:crossover_point2] + parent2[crossover_point2:]
  return child1, child2