# -*- coding: utf-8 -*-
"""lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sEIruKiEkij1Vea6T9w1dnx2zO_BkX39
"""

from random import choice
from math import inf
from math import inf as infinity
from random import choice
import platform
import time
from os import system
import math

X = "X"
O = "O"
EMPTY = None
playerr = X

def initial_state():

    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]

def turnofplayer(board):

    global playerr

    NoOfX = 0
    NoOfO = 0

    for i in range(0, len(board)):
        for j in range(0, len(board[0])):
            if board[i][j] == X:
                NoOfX += 1
            elif board[i][j] == O:
                NoOfO += 1

    if NoOfX > NoOfO:
            playerr = O
    elif NoOfX < NoOfO:
            playerr = X
    return playerr

def actions(board):

    availableplaces = []
    for x, row in range(len(board)):
            for  y in range(len(board[x])):
                   if board[x][y] == None:
                       availableplaces.append([x, y])
    return availableplaces

def result(board, action):  #disaplaying users moive on the board
    x, y = action[0], action[1]
    board[x][y] = turnofplayer(board)  #it uses the actions the user wants to make using the action func to find out the remainingplaces and them copies the symbol of the player whos turn is it at that position.

def winner(board):

    Winningoptions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]],
    ]
    if [X, X, X] in Winningoptions:
        return X
    elif [O, O, O] in Winningoptions:
        return O
    else:
        return None

def terminal(board):    #tells if game has been eded or no

    if (winner(board) is not None):
        return True #gameover
    else:
        return False

def utility(board):
    """
    Returns 1 if X has won the game, -1 if O has won, and 0 otherwise.
    """
    if terminal(board):
        if winner(board) == X:
            ans = 1
        elif winner(board) == O:
            ans = -1
        else:
            ans = 0

        return ans





def minimax(board):

    length = len(actions(board))
    if length == 0 or terminal(board):
        return None

    if length == 9:
        x = choice([0, 1, 2])
        y = choice([0, 1, 2])
    else:
        move = AI_Turn(board, length, pl)
        x, y = move[0], move[1]

    return [x, y]